generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  accounts      Account[]
  apiTokens     ApiToken[]
  creditLedger  CreditLedger[]
  customers     Customer[]
  installations Installation[]
  posts         Post[]
  sessions      Session[]
  subscriptions Subscription[]
  usageEvents   UsageEvent[]
  appointments  Appointment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Lead submissions from the public contact form
model Lead {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  name        String
  email       String
  company     String?
  budget      String?
  goals       String?
  message     String
  source      String?
  handled     Boolean   @default(false)
  pagePath    String?
  referrer    String?
  submittedAt DateTime?
  userAgent   String?
  utmCampaign String?
  utmContent  String?
  utmMedium   String?
  utmSource   String?
  utmTerm     String?
}

/// Billing & entitlements (Stripe-backed)
model Customer {
  id                 String   @id @default(cuid())
  userId             String
  provider           String
  providerCustomerId String
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerCustomerId])
  @@index([userId])
}

model Product {
  id     String  @id @default(cuid())
  code   String  @unique
  name   String
  prices Price[]
}

model Price {
  id              String  @id @default(cuid())
  productId       String
  provider        String
  providerPriceId String  @unique
  interval        String?
  currency        String
  unitAmount      Int
  metered         Boolean @default(false)
  includedCredits Int?
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String
  provider               String
  providerSubscriptionId String    @unique
  status                 String
  currentPeriodEnd       DateTime?
  planCode               String?
  quantity               Int       @default(1)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CreditLedger {
  id        String   @id @default(cuid())
  userId    String
  delta     Int
  currency  String?
  reason    String?
  sourceRef String?  @unique
  source    String?
  balanceAfter Int?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UsageEvent {
  id             String   @id @default(cuid())
  userId         String
  meterCode      String
  quantity       Int
  ts             DateTime @default(now())
  extEventId     String?  @unique
  idempotencyKey String?  @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Installation {
  id          String   @id @default(cuid())
  extensionId String
  instanceId  String
  userId      String?
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @default(now())
  revoked     Boolean  @default(false)
  user        User?    @relation(fields: [userId], references: [id])

  @@unique([extensionId, instanceId])
  @@index([userId])
}

model ApiToken {
  id        String    @id @default(cuid())
  userId    String
  installId String?
  scope     String
  jti       String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/// Service types for appointments
model Service {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  duration     Int           /// Duration in minutes
  price        Int?          /// Price in cents
  creditCost   Int?          /// Cost in credits
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

/// Available time slots for appointments
model TimeSlot {
  id          String        @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean       @default(true)
  isRecurring Boolean       @default(false)
  recurringPattern String?  /// RRULE pattern for recurring slots
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appointments Appointment[]

  @@index([startTime, endTime])
}

/// Customer appointment bookings
model Appointment {
  id          String   @id @default(cuid())
  userId      String
  serviceId   String
  timeSlotId  String?
  startTime   DateTime
  endTime     DateTime
  status      String   @default("scheduled") /// scheduled, confirmed, cancelled, completed, no_show
  notes       String?
  customerName String?
  customerEmail String?
  customerPhone String?
  reminderSent Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  service  Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  timeSlot TimeSlot? @relation(fields: [timeSlotId], references: [id])

  @@index([userId])
  @@index([startTime, endTime])
  @@index([status])
}
